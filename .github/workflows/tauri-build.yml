name: publish

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: '--target universal-apple-darwin'   # One universal mac build
          - platform: ubuntu-22.04
            args: ''
          - platform: windows-latest
            args: ''

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to get commit messages

      # Get PR or commit details for the release notes
      - name: Get release notes
        id: release_notes
        shell: bash
        run: |
          set -euo pipefail

          # Commit data
          SHA="$(git rev-parse HEAD)"

          # Try to read PR number from commit subject like "... (#123)"
          PR_NUMBER="$(git log -1 --pretty=format:'%s' | grep -oE '#[0-9]+' | tr -d '# ' || true)"

          if [[ -z "${PR_NUMBER:-}" ]]; then
            # Better: ask GitHub which PR(s) are linked to this commit
            PR_NUMBER="$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${SHA}/pulls" \
              | jq -r '.[0].number // empty')"
          fi

          if [[ -n "${PR_NUMBER:-}" ]]; then
            echo "Found PR #$PR_NUMBER"
            PR_INFO="$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")"

            TITLE="$(jq -r '.title // empty' <<<"$PR_INFO")"
            BODY="$(jq -r '.body // empty'  <<<"$PR_INFO")"
          else
            echo "No PR found. Using last commit."
            TITLE="$(git log -1 --pretty=%s)"
            BODY="$(git log -1 --pretty=%b)"
          fi

          # Normalize endings and guard empties
          TITLE="${TITLE//$'\r'/}"
          BODY="${BODY//$'\r'/}"
          if [[ -z "${BODY:-}" ]]; then
            BODY="See the assets to download this version and install."
          fi

          # Optional: trim very large bodies (example: 30000 chars)
          BODY="$(printf '%s' "$BODY" | head -c 30000)"

          # Write to $GITHUB_OUTPUT using multiline-safe heredoc
          {
            echo "title<<__TITLE__"
            echo "$TITLE"
            echo "__TITLE__"
            echo "body<<__BODY__"
            echo "$BODY"
            echo "__BODY__"
          } >> "$GITHUB_OUTPUT"
      - name: Linux deps
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          # Needed so universal contains BOTH slices
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.3
          run_install: false

      - name: PNPM store path
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Build & publish
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'Hippius v__VERSION__: ${{ steps.release_notes.outputs.title }}'
          releaseBody: ${{ steps.release_notes.outputs.body }}
          releaseDraft: false
          prerelease: false
          overwrite: true
          args: ${{ matrix.args }}
